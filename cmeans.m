function [Y,Xf,Af] = cmeans(X,~,~)
%
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx100 matrix, output #1 at timestep ts.
%

%#ok<*RPMT0>



% Layer 1
IW1_1 = [209.49999999999997158 186.50000000000011369 121 148.99999999999997158;218.88399999999990087 171.59599999999997522 153.0160000000000764 163.90400000000005321;183.94549763033199952 151.19668246445493764 166.54502369668250594 184.30331753554503393;142.97441860465116292 143.20232558139542789 154.55348837209294288 192.29767441860482791;103.50000000000004263 135.50000000000005684 143.00000000000002842 199.99999999999985789;84.499999999999914735 106.50000000000004263 148.00000000000011369 200.99999999999980105;79.821100917431266453 102.44495412844045745 150.18348623853199797 210.98165137614671494;74.831753554502284942 98.120853080568679161 152.51184834123233713 221.62559241706168223;69.499999999999971578 93.499999999999928946 154.99999999999991473 233.00000000000008527;46.499999999999964473 114.50000000000014211 148.00000000000008527 220.9999999999997442;208.43333333333316659 168.36666666666656056 131.13333333333346786 167.13333333333363839;226.50000000000028422 159.4999999999997442 179 175.99999999999988631;141.34108527131772348 130.22868217054275419 157.12403100775185294 193.58139534883724764;110.25132275132281734 119.54232804232822218 149.13756613756618208 200.00000000000017053;87.898190045248924207 113.62217194570135348 147.1357466063347772 203.50678733031674028;79.703007518796965769 102.13909774436093869 149.30827067669156349 205.36090225563933132;66.063432835820805167 91.787313432835716753 153.42537313432802648 214.53358208955242503;52.625925925926061666 81.588888888888746465 157.48148148148175096 223.57037037037065375;46.500000000000028422 114.49999999999982947 147.99999999999997158 221.00000000000034106;46.500000000000028422 114.49999999999982947 147.99999999999997158 221.00000000000034106;207.49999999999971578 152.49999999999977263 140.00000000000022737 182.9999999999997442;207.49999999999971578 152.49999999999977263 140.00000000000022737 182.9999999999997442;114.50000000000019895 109.49999999999972999 152.99999999999980105 200.00000000000028422;116.62765957446805487 106.48581560283690806 156.90070921985804375 206.56028368794312655;118.11445783132533904 104.37951807228927237 159.62650602409667044 211.14457831325273673;73.500000000000071054 96.500000000000028422 151.00000000000005684 211.00000000000011369;76.998281786941575433 75.809278350515455713 159.381443298969117 215.77319587628863928;68.406666666666637866 70.400000000000019895 161.14000000000015689 216.2999999999999261;35.499999999999957367 69.499999999999985789 160.00000000000005684 213.9999999999997442;49.076923076923087308 75.846153846153910649 148.00000000000019895 218.42307692307690559;194.26470588235309833 141.38235294117663443 145.29411764705886867 194.11764705882345083;140.28787878787886712 99.035353535353678467 157.111111111111029 205.60606060606073697;137.50847457627125436 97.593220338983130091 160.92372881355930758 212.2881355932202041;135.58391608391610816 96.702797202797214027 163.38461538461527311 216.60839160839168471;126.49999999999994316 92.499999999999985789 175.00000000000002842 237;94.969879518072303881 71.126506024096457281 162.06024096385559119 218.15662650602399708;86.936950146627594904 66.491202346041006876 163.53665689149548257 218.55718475073297213;79.317142857142982848 62.094285714285739175 164.93714285714258949 218.93714285714301582;51.499999999999964473 39.500000000000021316 148.00000000000002842 215.99999999999965894;51.499999999999964473 39.500000000000021316 148.00000000000002842 215.99999999999965894;182.49999999999994316 131.49999999999994316 149.99999999999994316 204.00000000000011369;182.49999999999985789 131.49999999999988631 150.00000000000011369 203.99999999999991473;183.5000000000002558 81.500000000000099476 164 215.00000000000019895;168.5 84.394736842105260166 166.89473684210545912 220.78947368421046349;140.20103092783506327 78.994845360824768932 162.25773195876274713 213.42268041237119292;108.50000000000001421 67.500000000000042633 151.99999999999991473 196.00000000000005684;106.50000000000017053 57.500000000000142109 167.99999999999968736 222.00000000000056843;106.50000000000017053 57.500000000000135003 167.99999999999968736 222.00000000000054001;51.500000000000049738 39.500000000000021316 148.00000000000019895 215.9999999999997442;51.499999999999964473 39.500000000000021316 148.00000000000002842 215.99999999999965894;185.74840764331221976 80.066878980891644346 175.98726114649679175 218.61783439490449155;159.93678160919540687 83.224137931034391613 146.75862068965503227 208.67816091954017566;166.61764705882336557 82.735294117647015355 151.6470588235293917 210.47058823529391702;144.33419689119170926 76.893782383419647886 151.78238341968921077 204.92227979274608174;108.49999999999991473 67.499999999999943157 151.99999999999977263 196.00000000000011369;119.11538461538471267 44.339160839160875582 154.89510489510485058 197.44755244755248214;130.49999999999988631 19.500000000000010658 157.99999999999994316 199.00000000000014211;95.625 41.458333333333314386 162.52083333333328596 213.85416666666668561;76.5 53.500000000000028422 164.99999999999977263 222.00000000000011369;76.500000000000071054 53.499999999999950262 164.99999999999988631 221.99999999999963052;188.50000000000022737 36.499999999999978684 197.99999999999980105 230.99999999999954525;188.5000000000002558 36.499999999999985789 197.99999999999977263 230.99999999999951683;142.49999999999988631 84.499999999999943157 134.00000000000002842 203.99999999999977263;142.49999999999988631 84.499999999999943157 134.00000000000017053 204.00000000000019895;122.04471544715448772 74.272357723577201227 144.82926829268282631 199.18699186991867123;119.11538461538471267 44.339160839160875582 154.89510489510485058 197.44755244755248214;130.50000000000019895 19.500000000000017764 158.00000000000008527 199.00000000000028422;130.50000000000019895 19.500000000000017764 158.00000000000008527 199.00000000000028422;88.120253164556956449 46.183544303797432917 163.4936708860759893 217.05063291139248349;76.500000000000014211 53.500000000000028422 164.99999999999977263 222.00000000000034106;169.78318584070811426 43.362831858407119512 191.13716814159320734 223.51327433628287622;142.49999999999988631 84.499999999999943157 134.00000000000017053 204.00000000000019895;142.49999999999988631 84.499999999999943157 134.00000000000017053 204.00000000000019895;142.49999999999988631 84.499999999999943157 134.00000000000017053 204.00000000000019895;147.49999999999988631 67.5 159.99999999999994316 199.99999999999985789;138.74626865671646669 42.783582089552311345 158.97014925373156302 199.48507462686544045;130.50000000000019895 19.500000000000017764 158.00000000000008527 199.00000000000028422;95.625 41.458333333333314386 162.52083333333328596 213.85416666666668561;76.500000000000014211 53.500000000000028422 164.99999999999977263 222.00000000000034106;76.500000000000014211 53.500000000000021316 164.9999999999997442 222.00000000000034106;158.49999999999971578 47.500000000000014211 186.99999999999968736 219.00000000000028422;158.50000000000017053 47.500000000000071054 187.00000000000011369 219.00000000000017053;155.05607476635495345 53.761682242990680436 178.5467289719626649 213.05140186915866707;147.49999999999988631 67.5 159.99999999999994316 199.99999999999985789;147.50000000000011369 67.5 160.00000000000005684 199.99999999999985789;147.50000000000008527 67.500000000000014211 160 200.00000000000008527;147.50000000000005684 67.499999999999957367 160 199.99999999999982947;130.50000000000019895 19.500000000000017764 158.00000000000008527 199.00000000000028422;76.500000000000014211 53.500000000000021316 164.9999999999997442 222.00000000000036948;76.500000000000014211 53.500000000000028422 164.99999999999977263 222.00000000000034106;158.49999999999971578 47.5 186.99999999999965894 219.00000000000019895;158.49999999999971578 47.5 186.99999999999965894 219.00000000000019895;147.50000000000005684 67.499999999999957367 160 199.99999999999982947;147.50000000000005684 67.499999999999957367 160 199.99999999999982947;147.49999999999988631 67.5 159.99999999999994316 199.99999999999985789;147.50000000000011369 67.5 160.00000000000005684 199.99999999999985789;147.49999999999988631 67.5 159.99999999999994316 199.99999999999985789;130.50000000000008527 19.500000000000024869 158.00000000000008527 199.00000000000034106;147.49999999999988631 67.5 159.99999999999994316 199.99999999999985789;130.50000000000019895 19.500000000000017764 158.00000000000008527 199.00000000000028422];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    % no processing
    
    % Layer 1
    z1 = negdist_apply(IW1_1,X{1,ts});
    a1 = compet_apply(z1);
    
    % Output 1
    Y{1,ts} = a1;
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(1,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Negative Distance Weight Function
function z = negdist_apply(w,p,~)
[S,R] = size(w);
Q = size(p,2);
if isa(w,'gpuArray')
    z = iNegDistApplyGPU(w,p,R,S,Q);
else
    z = iNegDistApplyCPU(w,p,S,Q);
end
end
function z = iNegDistApplyCPU(w,p,S,Q)
z = zeros(S,Q);
if (Q<S)
    pt = p';
    for q=1:Q
        z(:,q) = sum(bsxfun(@minus,w,pt(q,:)).^2,2);
    end
else
    wt = w';
    for i=1:S
        z(i,:) = sum(bsxfun(@minus,wt(:,i),p).^2,1);
    end
end
z = -sqrt(z);
end
function z = iNegDistApplyGPU(w,p,R,S,Q)
p = reshape(p,1,R,Q);
sd = arrayfun(@iNegDistApplyGPUHelper,w,p);
z = -sqrt(reshape(sum(sd,2),S,Q));
end
function sd = iNegDistApplyGPUHelper(w,p)
sd = (w-p) .^ 2;
end

% Competitive Transfer Function
function a = compet_apply(n,~)
if isempty(n)
    a = n;
else
    [S,Q] = size(n);
    nanInd = any(isnan(n),1);
    a = zeros(S,Q,'like',n);
    [~,maxRows] = max(n,[],1);
    onesInd = maxRows + S*(0:(Q-1));
    a(onesInd) = 1;
    a(:,nanInd) = NaN;
end
end
